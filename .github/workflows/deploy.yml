name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # To add own custom test runner need to add container field below runs-on field - then need to add name of image that is available to use
    container:
      image: node:16 # Runs node version 16 in container
      # env: - some images require env variables to work, can declare them under env field.
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb

      # As job is using a container service, simply add service name given below to set the database address to the services image used below.
      MONGODB_CLUSTER_ADDRESS: mongodb

      # MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      # MONGODB_CLUSTER_ADDRESS: cluster0.juzs8.mongodb.net
      # MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      # MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

      # Need to connect with below services mongodb database to test on container version and not production database
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080

    # To add a service to run in a container e.g. Creating a separate database copy of real DB to run only in a container, use the services field.
    # Services can run with custom containers or built in Github runners
    services:
      # Give service a name - can be anything
      mongodb:
        # Use the mongo docker services image to create a mongodb database in container
        image: mongo
        env:
          # Need to supply the below env variables in order for docker container to connect to the database - can be given any values
          # Need to use the same values in the above container so that when main container image attempts to connect to database it connects to this copy version instead of production database
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
